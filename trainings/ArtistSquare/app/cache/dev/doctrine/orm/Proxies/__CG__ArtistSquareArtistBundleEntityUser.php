<?php

namespace Proxies\__CG__\ArtistSquare\ArtistBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \ArtistSquare\ArtistBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'nickname', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'admin', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'phrase', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'photo', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'deleted', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'blockedUntil', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'blockReason', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'id');
        }

        return array('__isInitialized__', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'nickname', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'admin', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'phrase', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'photo', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'deleted', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'blockedUntil', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'blockReason', '' . "\0" . 'ArtistSquare\\ArtistBundle\\Entity\\User' . "\0" . 'id');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setNickname($nickname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNickname', array($nickname));

        return parent::setNickname($nickname);
    }

    /**
     * {@inheritDoc}
     */
    public function getNickname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNickname', array());

        return parent::getNickname();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdmin($admin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdmin', array($admin));

        return parent::setAdmin($admin);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdmin', array());

        return parent::getAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', array($salt));

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhrase($phrase)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhrase', array($phrase));

        return parent::setPhrase($phrase);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhrase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhrase', array());

        return parent::getPhrase();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhoto($photo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhoto', array($photo));

        return parent::setPhoto($photo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhoto()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhoto', array());

        return parent::getPhoto();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', array($deleted));

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleted', array());

        return parent::getDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockedUntil($blockedUntil)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockedUntil', array($blockedUntil));

        return parent::setBlockedUntil($blockedUntil);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockedUntil()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockedUntil', array());

        return parent::getBlockedUntil();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockReason($blockReason)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockReason', array($blockReason));

        return parent::setBlockReason($blockReason);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockReason', array());

        return parent::getBlockReason();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

}
